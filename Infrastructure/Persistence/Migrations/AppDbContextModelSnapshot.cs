// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Accept", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Title_accept")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title_no_accept")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("product_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("product_id")
                        .IsUnique();

                    b.ToTable("Accepts");
                });

            modelBuilder.Entity("Domain.Models.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Account_image")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("account_image");

                    b.Property<string>("Company_name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Delivery")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("account");
                });

            modelBuilder.Entity("Domain.Models.Basket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("account_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("account_id")
                        .IsUnique();

                    b.ToTable("Baskets");
                });

            modelBuilder.Entity("Domain.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Starts_count")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("account_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("product_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("account_id");

                    b.HasIndex("product_id");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Domain.Models.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("account_id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("product_id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("story_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FilePath")
                        .IsUnique();

                    b.HasIndex("account_id")
                        .IsUnique();

                    b.HasIndex("product_id");

                    b.HasIndex("story_id")
                        .IsUnique();

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Domain.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<int>("Availability_count")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Count_massa")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Discount_price")
                        .HasColumnType("double precision");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<bool>("Product_accept")
                        .HasColumnType("boolean");

                    b.Property<int>("Region")
                        .HasColumnType("integer");

                    b.Property<int>("Sales_count")
                        .HasColumnType("integer");

                    b.Property<Guid>("account_id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("basket_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("account_id");

                    b.HasIndex("basket_id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Domain.Models.Story", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Like")
                        .HasColumnType("integer");

                    b.Property<string>("Story_Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("account_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("account_id");

                    b.ToTable("Stories");
                });

            modelBuilder.Entity("Domain.Models.Accept", b =>
                {
                    b.HasOne("Domain.Models.Product", "Product")
                        .WithOne("Accept")
                        .HasForeignKey("Domain.Models.Accept", "product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Models.Basket", b =>
                {
                    b.HasOne("Domain.Models.Account", "Account")
                        .WithOne("Basket")
                        .HasForeignKey("Domain.Models.Basket", "account_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Models.Comment", b =>
                {
                    b.HasOne("Domain.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("account_id");

                    b.HasOne("Domain.Models.Product", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Models.Image", b =>
                {
                    b.HasOne("Domain.Models.Account", "Account")
                        .WithOne("Image")
                        .HasForeignKey("Domain.Models.Image", "account_id");

                    b.HasOne("Domain.Models.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("product_id");

                    b.HasOne("Domain.Models.Story", "Story")
                        .WithOne("Image")
                        .HasForeignKey("Domain.Models.Image", "story_id");

                    b.Navigation("Account");

                    b.Navigation("Product");

                    b.Navigation("Story");
                });

            modelBuilder.Entity("Domain.Models.Product", b =>
                {
                    b.HasOne("Domain.Models.Account", "Account")
                        .WithMany("Products")
                        .HasForeignKey("account_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Basket", "Basket")
                        .WithMany("Products")
                        .HasForeignKey("basket_id");

                    b.Navigation("Account");

                    b.Navigation("Basket");
                });

            modelBuilder.Entity("Domain.Models.Story", b =>
                {
                    b.HasOne("Domain.Models.Account", "Account")
                        .WithMany("Stories")
                        .HasForeignKey("account_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Domain.Models.Account", b =>
                {
                    b.Navigation("Basket");

                    b.Navigation("Image")
                        .IsRequired();

                    b.Navigation("Products");

                    b.Navigation("Stories");
                });

            modelBuilder.Entity("Domain.Models.Basket", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Models.Product", b =>
                {
                    b.Navigation("Accept")
                        .IsRequired();

                    b.Navigation("Comments");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("Domain.Models.Story", b =>
                {
                    b.Navigation("Image")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
